tmp <- grep("wig",unlist(strsplit(tmp," ")),value=TRUE)
download.file("https://egg2.wustl.edu/roadmap/data/byDataType/dnamethylation/WGBS/EG.mnemonics.name.xls",destfile="SampleKey.xls")
getwd()
sample.key <- read_xls("SampleKey.xls")
library(readxl)
sample.key <- read_xls("SampleKey.xls")
getwd()
dir()
sample.key <- read_xls("SampleKey.xls")
dir()
download.file("https://egg2.wustl.edu/roadmap/data/byDataType/dnamethylation/WGBS/EG.mnemonics.name.xls",destfile="/Users/cansav091/Desktop/SampleKey.xls")
sample.key <- read_xls("/Users/cansav091/Desktop/SampleKey.xls")
sample.key <- read_xls("/Users/cansav091/Desktop/SampleKey.xls")
sample.key <- read_xls("/Users/cansav091/Desktop/SampleKey.xls",sheet=1)
sample.key <- read.table("/Users/cansav091/Desktop/SampleKey.xls")
samples <- readLines("https://egg2.wustl.edu/roadmap/data/byDataType/dnamethylation/WGBS/FractionalMethylation_bigwig/")
samples
samples <- paste0("https://egg2.wustl.edu/roadmap/data/byDataType/dnamethylation/WGBS/FractionalMethylation_bigwig/",sample.key$V1, "_WGBS_FractionalMethylation.bigwig")
samples
if(dir.exists("SamplesData")==FALSE){
dir.create("SamplesData")
}
sample.data <- list()
library(bwtools)
library(rtracklayer)
ii=1
sample.files[ii]
sample.files <- paste0("https://egg2.wustl.edu/roadmap/data/byDataType/dnamethylation/WGBS/FractionalMethylation_bigwig/",sample.key$V1, "_WGBS_FractionalMethylation.bigwig")
sample.files[ii]
sample.data <- list()
sample.data[[ii]] <- import.bw(sample.files[ii],as="GRanges")
overlap <- overlapsRanges(EPIC.manifest,sample.data[[ii]])
library(GenomicRanges)
overlap <- overlapsRanges(EPIC.manifest,sample.data[[ii]])
overlap <- overlap(EPIC.manifest,sample.data[[ii]])
overlap <- findOverlaps(EPIC.manifest,sample.data[[ii]])
EPIC.manifest@elementMetadata@listData$ProbeSeqA@pool@xp_list
EPIC.manifest@elementMetadata@listData$ProbeSeqA@pool@.link_to_cached_object_list
EPIC.manifest@elementMetadata@listData$addressA
EPIC.manifest@elementMetadata@listData$addressB
Koverlap <- findOverlaps(EPIC.manifest[!is.na(EPIC.manifest@elementMetadata@listData$addressB)],sample.data[[ii]])
k450ray <- read.csv("/Users/cansav091/Desktop/450KInfo.csv")
k450ray <- read.csv("/Users/cansav091/Desktop/450KInfo.csv")
head(k450ray)
k450.manifest <- EPIC.manifest[match(k450ray$Name,EPIC.manifest@ranges@NAMES)]
match(k450ray$Name,EPIC.manifest@ranges@NAMES)
tmp <- match(k450ray$Name,EPIC.manifest@ranges@NAMES)
k450.manifest <- EPIC.manifest[tmp[!is.na(tmp)]]
tmp <- match(EPIC.manifest@ranges@NAMES,k450ray$Name)
nonk450.EPIC.manifest <- EPIC.manifest[tmp[is.na(tmp)]]
nonk450.EPIC.manifest <- EPIC.manifest[which(is.na(tmp))]
sample.key <- read.table("/Users/cansav091/Desktop/SampleKey.xls")
brain.samples <- grep("BRN",sample.key$V2)
nonbrain.samples <- grep("BRN",sample.key$V2,invert=FALSE)
sample.files <- paste0("https://egg2.wustl.edu/roadmap/data/byDataType/dnamethylation/WGBS/FractionalMethylation_bigwig/",sample.key$V1, "_WGBS_FractionalMethylation.bigwig")
sample.data <- list()
Kbrain=Ntot=kbrain=ntot= rep(NA,length(sample.files))
for(ii in 1:length(sample.files)){
sample.data[[ii]] <- import.bw(sample.files[ii],as="GRanges")
}
sample.data[[ii]] <- import.bw(sample.files[ii],as="GRanges")
fstat=c()#### A bunch of empty vectors to store stats in.
c()
getwd()
dir()
sample.files <- paste0("https://egg2.wustl.edu/roadmap/data/byDataType/dnamethylation/WGBS/FractionalMethylation_bigwig/",sample.key$V1, "_WGBS_FractionalMethylation.bigwig")
sample.key <- read.table("/Users/cansav091/Desktop/SampleKey.xls")
brain.samples <- grep("BRN",sample.key$V2)
nonbrain.samples <- grep("BRN",sample.key$V2,invert=FALSE)
sample.files <- paste0("https://egg2.wustl.edu/roadmap/data/byDataType/dnamethylation/WGBS/FractionalMethylation_bigwig/",sample.key$V1, "_WGBS_FractionalMethylation.bigwig")
Kbrain=Ntot=kbrain=ntot= rep(NA,length(sample.files))
sample.data <- list()
for(ii in 1:length(sample.files)){
sample.data[[ii]] <- import.bw(sample.files[ii],as="GRanges")
}
library(readxl)
library(rtracklayer)
library(GenomicRanges)
load("/Users/cansav091/Desktop/EPIC.manifest.rda")
k450ray <- read.csv("/Users/cansav091/Desktop/450KInfo.csv")
tmp <- match(k450ray$Name,EPIC.manifest@ranges@NAMES)
k450.manifest <- EPIC.manifest[tmp[!is.na(tmp)]]
tmp <- match(EPIC.manifest@ranges@NAMES,k450ray$Name)
nonk450.EPIC.manifest <- EPIC.manifest[which(is.na(tmp))]
library(readxl)
library(rtracklayer)
library(GenomicRanges)
load("/Users/cansav091/Desktop/EPIC.manifest.rda")
k450ray <- read.csv("/Users/cansav091/Desktop/450KInfo.csv")
tmp <- match(k450ray$Name,EPIC.manifest@ranges@NAMES)
k450.manifest <- EPIC.manifest[tmp[!is.na(tmp)]]
tmp <- match(EPIC.manifest@ranges@NAMES,k450ray$Name)
nonk450.EPIC.manifest <- EPIC.manifest[which(is.na(tmp))]
download.file("https://egg2.wustl.edu/roadmap/data/byDataType/dnamethylation/WGBS/EG.mnemonics.name.xls",destfile="/Users/cansav091/Desktop/SampleKey.xls")
sample.key <- read.table("/Users/cansav091/Desktop/SampleKey.xls")
brain.samples <- grep("BRN",sample.key$V2)
nonbrain.samples <- grep("BRN",sample.key$V2,invert=FALSE)
sample.files <- paste0("https://egg2.wustl.edu/roadmap/data/byDataType/dnamethylation/WGBS/FractionalMethylation_bigwig/",sample.key$V1, "_WGBS_FractionalMethylation.bigwig")
Kbrain=Ntot=kbrain=ntot= rep(NA,length(sample.files))
sample.data <- list()
for(ii in 1:length(sample.files)){
sample.data[[ii]] <- import.bw(sample.files[ii],as="GRanges")
}
n
source("https://bioconductor.org/biocLite.R")
biocLite("SCAN.UPC")
devtools::install_url("http://mbni.org/customcdf/22.0.0/entrezg.download/hugene10sthsentrezgprobe_22.0.0.tar.gz")
load("/Users/cansav091/Desktop/hugene10sthsentrezgprobe/data/hugene10sthsentrezgprobe.rda")
devtools::install_url("http://mbni.org/customcdf/22.0.0/entrezg.download/hugene10sthsentrezgprobe_22.0.0.tar.gz")
devtools::install_url("http://mbni.org/customcdf/22.0.0/entrezg.download/hugene10sthsentrezgprobe_22.0.0.tar.gz")
library(affy)
devtools::install_url("http://mbni.org/customcdf/22.0.0/entrezg.download/hugene10sthsentrezgprobe_22.0.0.tar.gz")
library(affy)
data<-ReadAffy()
data@cdfName<-"hu10sthsentrezprobe_22.0.0"
data<-ReadAffy()
devtools::install_url("http://mbni.org/customcdf/22.0.0/entrezg.download/hugene10sthsentrezgprobe_22.0.0.tar.gz")
library(hugene10sthsentrezgprobe)
data@cdfName<-data(hugene10sthsentrezgprobe)
tmpDir = tempdir()
getGEOSuppFiles("GSM555237", makeDirectory=FALSE, baseDir=tmpDir)
library(GEOquery)
getGEOSuppFiles("GSM555237", makeDirectory=FALSE, baseDir=tmpDir)
celFilePath = file.path(tmpDir, "GSM555237.CEL.gz")
SCAN("GSE22309", outFilePath = NA, convThreshold = 0.01, annotationPackageName = NA,
probeSummaryPackage = hugene10sthsentrezgprobe, probeLevelOutDirPath = NA, exonArrayTarget=NA,
batchFilePath=NA, verbose = TRUE)
library(SCAN.UPC)
xx <- SCAN("GSE22309", outFilePath = NA, convThreshold = 0.01, annotationPackageName = NA,
probeSummaryPackage = hugene10sthsentrezgprobe, probeLevelOutDirPath = NA, exonArrayTarget=NA,
batchFilePath=NA, verbose = TRUE)
library(doParallel)
registerDoParallel(cores=2)
xx <- SCAN("GSE22309", outFilePath = "normalized_data.txt", convThreshold = 0.01, annotationPackageName = NA,
probeSummaryPackage = hugene10sthsentrezgprobe, probeLevelOutDirPath = NA, exonArrayTarget=NA,
batchFilePath=NA, verbose = TRUE)
normalized = SCANfast("GSM555237", outFilePath = "normalized_data.txt", convThreshold = 0.01, probeSummaryPackage = hugene10sthsentrezgprobe)
library(GEOquery)
library(SCAN.UPC)
library(affy)
library(doParallel)
library(hugene10sthsentrezgprobe)
CEL.files <- dir("./raw")
CEL.files <- paste0("./raw",dir("./raw"))
CEL.files <- paste0("./raw/",dir("./raw"))
data <- ReadAffy(CEL.files[1])
data <- ReadAffy(CEL.files)
CEL.files <- paste0("./raw/",dir("./raw"))
str(CEL.files)
data <- ReadAffy(filenames=CEL.files)
library(oligo)
data <- ReadAffy(filenames=CEL.files)
data@cdfName<-data(hugene10sthsentrezgprobe)
normalized = SCANfast(CEL.files, outFilePath = "normalized_data.txt", convThreshold = 0.01, probeSummaryPackage = hugene10sthsentrezgprobe)
normalized = SCANfast(CEL.files, probeSummaryPackage = hugene10sthsentrezgprobe)
normalized = SCANfast("./raw/*.CEL", probeSummaryPackage = hugene10sthsentrezgprobe)
metadata <- read.table("./metadata/clinical_data.tsv")
metadata <- read.table("./metadata/clinical_data.tsv",colnames= 1)
metadata <- read.table("./metadata/clinical_data.tsv",col.names= 1)
metadata <- read.table("./metadata/clinical_data.tsv",col.names= 1,sep="\t")
metadata <- read.table("./metadata/clinical_data.tsv",col.names= 1,sep="/t")
metadata <- read.table("./metadata/clinical_data.tsv",col.names= 1)
metadata <- read.table("./metadata/clinical_data.tsv",col.names= 1, sep=" ")
metadata <- read.table("./metadata/clinical_data.tsv",col.names= 1, sep="\t")
metadata <- read.table("./metadata/clinical_data.tsv",col.names= 1, sep="\t")
metadata <- read.table("./metadata/clinical_data.tsv", sep="\t")
metadata <- read.table("./metadata/clinical_data.tsv")
metadata <- read.table("./metadata/clinical_data.tsv",skip=1)
metadata <- read.table("./metadata/clinical_data.tsv",skip=1,stringsAsFactors = FALSE)
which(metadata[,1]=="N1001|N1002|N1003|N1004|N1006")
grep("N1001|N1002|N1003|N1004|N1006",metadata[,1])
metadata.all <- read.table("./metadata/clinical_data.tsv",skip=1,stringsAsFactors = FALSE)
metadata.samples <- metadata.all[grep("N1001|N1002|N1003|N1004|N1006",metadata.all[,1]),]
metadata.samples
expression.file <- read.table("./processed/expression.pcl")
View(expression.file)
pca <- prcomp(expression.file)
plot(pca$x)
pca <- prcomp(t(expression.file))
plot(pca$x)
head(metadata.all)
metadata.all <- read.table("./metadata/clinical_data.tsv",skip=1)
plot(pca$x,pch=19,bg=c("blue","red")[meta.data.all$V2])
meta.data.all$V2
plot(pca$x,pch=19,bg=c("blue","red")[metadata.all$V2])
plot(pca$x,pch=19,bg=c("blue","red","yellow")[metadata.all$V2])
plot(pca$x,bg=c("blue","red","yellow")[metadata.all$V2])
plot(pca$x,pch=20,bg=c("blue","red","yellow")[metadata.all$V2])
c("blue","red","yellow")[metadata.all$V2]
plot(pca$x,bg=c("blue","red","yellow")[metadata.all$V2])
plot(pca$x,bg=c("blue","red","yellow")[as.factor(metadata.all$V2)])
plot(pca$x,pch=21,bg=c("blue","red","yellow")[as.factor(metadata.all$V2)])
plot(pca$x,pch=21,bg=c("blue","red","yellow")[metadata.all$V2])
metadata.all$V2
plot(pca$x,pch=21,bg=c("blue","red","yellow")[metadata.all$V3])
plot(pca$x,pch=21,bg=c("blue","red","yellow","green")[metadata.all$V3])
plot(pca$x,pch=21,bg=c("blue","red","yellow","green")[metadata.all$V3])
plot(pca$x,pch=21,bg=c("blue","red","yellow")[metadata.all$V2])
plot(pca$x,pch=21,bg=c("blue","red","yellow","green")[metadata.all$V3])
plot(pca$x,pch=21,bg=c("blue","red","yellow")[metadata.all$V2])
legend(x="bottomright", legend = levels(metadata.all$V2),fill=c("yellow","red","orange","black"),cex=.8)
plot(pca$x,pch=21,bg=c("blue","red","yellow")[metadata.all$V2])
legend(x="bottomright", legend = levels(metadata.all$V2),fill=c("blue","red","yellow"),cex=.8)
plot(pca$x,pch=21,bg=c("blue","red","yellow")[metadata.all$V2]);
legend(x="bottomright", legend = levels(metadata.all$V2),fill=c("blue","red","yellow"),cex=.8)
legend(x="topleft", legend = levels(metadata.all$V2),fill=c("blue","red","yellow"),cex=.8)
plot(pca$x,pch=21,bg=c("blue","red","yellow")[metadata.all$V2]);
legend(x="topleft", legend = levels(metadata.all$V2),fill=c("blue","red","yellow"),cex=.8)
plot(pca$x[,2:3],pch=21,bg=c("blue","red","yellow")[metadata.all$V2]);
legend(x="topleft", legend = levels(metadata.all$V2),fill=c("blue","red","yellow"),cex=.8)
plot(pca$x[,2:3],pch=21,bg=c("blue","red","yellow")[metadata.all$V2]);
legend(x="topleft", legend = levels(metadata.all$V2),fill=c("blue","red","yellow"),cex=.8)
plot(pca$x,pch=21,bg=c("blue","red","yellow")[metadata.all$V1])
plot(pca$rotation)
colorRamp(3)
colors(distinct=TRUE)
function(dat,var ){
colz <- colors(distinct=TRUE)[runif(length(levels(var)))]
plot(dat,pch=21,bg=colz[metadata.all$V2]);
legend(x="topleft", legend = levels(var),fill=colz,cex=.8)
}
pc.plot <- function(dat,var){
colz <- colors(distinct=TRUE)[runif(length(levels(var)))]
plot(dat,pch=21,bg=colz[metadata.all$V2]);
legend(x="topleft", legend = levels(var),fill=colz,cex=.8)
}
pc.plot <- function(dat,var){
colz <- colors(distinct=TRUE)[runif(length(levels(var)))]
plot(dat,pch=21,bg=colz[metadata.all$V2]);
legend(x="topleft", legend = levels(var),fill=colz,cex=.8)
}
pc.plot(pca$x,metadata.all$V1)
pc.plot(pca$x,metadata.all$V2)
colz <- colors(distinct=TRUE)[runif(length(levels(var)))]
colors(distinct=TRUE)
colz <- colors(distinct=TRUE)[runif(length(levels(var)),min=1,max=length(colors(distinct=TRUE)))]
colz
pc.plot <- function(dat,var){
colz <- colors(distinct=TRUE)[runif(length(levels(var)),min=1,max=length(colors(distinct=TRUE)))]
plot(dat,pch=21,bg=colz[metadata.all$V2]);
legend(x="topleft", legend = levels(var),fill=colz,cex=.8)
}
pc.plot(pca$x,metadata.all$V2)
pc.plot(pca$x,metadata.all$V3)
pc.plot(pca$x,metadata.all$V4)
metadata.all <- read.table("./metadata/clinical_data.tsv",skip=1)
pc.plot(pca$x,metadata.all$V5)
pc.plot(pca$x,metadata.all$V3)
pc.plot(pca$x,metadata.all$V4)
pc.plot(pca$x,as.factor(metadata.all$V4))
plot(metadata.all$V4,metadata.all$V5)
plot(metadata.all$V2,metadata.all$V5)
metadata.all$V4
table(metadata.all$V2,metadata.all$V4)
source("https://bioconductor.org/biocLite.R")
library(sva)
combat.normalized <- ComBat(expression.dat)
colnames(metadata.all) <- c("id","disease","state","batch","group")
pc.plot <- function(dat,var){
colz <- colors(distinct=TRUE)[runif(length(levels(var)),min=1,max=length(colors(distinct=TRUE)))]
plot(dat,pch=21,bg=colz[var]);
legend(x="topleft", legend = levels(var),fill=colz,cex=.8)
}
combat.normalized <- ComBat(expression.dat,metadata.all$batch)
expression.dat <- read.table("./processed/expression.pcl")
combat.normalized <- ComBat(expression.dat,metadata.all$batch)
combat.pca <- prcomp(t(combat.normalized))
plot(pca$rotation)
plot(combat.pca$rotation)
pc.plot(combat.pca$x,metadata.all$batch)
pc.plot <- function(dat,var){
colz <- colors(distinct=TRUE)[runif(length(levels(var)),min=1,max=length(colors(distinct=TRUE)))]
plot(dat,pch=21,bg=colz[var]);
legend(x="topleft", legend = levels(var),fill=colz,cex=.8)
}
pc.plot(combat.pca$x,metadata.all$batch)
levels(metadata.all$batch)
metadata.all <- read.table("./metadata/clinical_data.tsv",skip=1)
colnames(metadata.all) <- c("id","disease","state","batch","group")
pc.plot <- function(dat,var){
colz <- colors(distinct=TRUE)[runif(length(levels(var)),min=1,max=length(colors(distinct=TRUE)))]
plot(dat,pch=21,bg=colz[var]);
legend(x="topleft", legend = levels(var),fill=colz,cex=.8)
}
pc.plot(combat.pca$x,metadata.all$batch)
pc.plot(combat.pca$x,var= metadata.all$batch)
levels(var())
levels(var)
levels( metadata.all$batch)
pc.plot(combat.pca$x,as.factor(metadata.all$batch))
plot(pca$rotation)
pc.plot(pca$x,metadata.all$disease)
pc.plot(pca$x,metadata.all$disease)
pc.plot(pca$x,metadata.all$state)
pc.plot(pca$x,as.factor(metadata.all$batch))
table(metadata.all$V2,metadata.all$V4)
table(metadata.all$disease,metadata.all$batch)
combat.pca <- prcomp(t(combat.normalized))
plot(combat.pca$rotation)
pc.plot(combat.pca$x,as.factor(metadata.all$batch))
library(readxl)
library(flowCore)
source("https://bioconductor.org/biocLite.R")
biocLite("flowCore")
url <- "http://imlspenticton.uzh.ch/robinson_lab/cytofWorkflow"
metadata_filename <- "PBMC8_metadata.xlsx"
download.file(paste0(url, "/", metadata_filename), destfile = metadata_filename, mode = "wb")
md <- read_excel(metadata_filename)
md$condition <- factor(md$condition, levels = c("Ref", "BCRXL")) head(data.frame(md))
md$condition <- factor(md$condition, levels = c("Ref", "BCRXL"))
head(data.frame(md))
color_conditions <- c("#6A3D9A", "#FF7F00") names(color_conditions) <- levels(md$condition)
color_conditions <- c("#6A3D9A", "#FF7F00")
names(color_conditions) <- levels(md$condition)
fcs_filename <- "PBMC8_fcs_files.zip"
download.file(paste0(url, "/", fcs_filename), destfile = fcs_filename, mode = "wb") unzip(fcs_filename)
download.file(paste0(url, "/", fcs_filename), destfile = fcs_filename, mode = "wb")
download.file(paste0(url, "/", fcs_filename), destfile = fcs_filename, mode = "wb")
unzip(fcs_filename)
fcs_raw <- read.flowSet(md$file_name, transformation = FALSE, truncate_max_range = FALSE)
library(readxl)
library(flowCore)
fcs_raw <- read.flowSet(md$file_name, transformation = FALSE, truncate_max_range = FALSE)
fcs_raw
panel_filename <- "PBMC8_panel.xlsx"
download.file(paste0(url, "/", panel_filename), destfile =panel_filename, mode = "wb")
panel <- read_excel(panel_filename) head(data.frame(panel))
panel <- read_excel(panel_filename)
head(data.frame(panel))
panel$Antigen <- gsub("-", "_", panel$Antigen)
panel_fcs <- pData(parameters(fcs_raw[[1]]))
head(panel_fcs)
panel_fcs$desc <- gsub("-", "_", panel_fcs$desc)
(lineage_markers <- panel$Antigen[panel$Lineage == 1])
(functional_markers <- panel$Antigen[panel$Functional == 1])
all(lineage_markers %in% panel_fcs$desc)
all(functional_markers %in% panel_fcs$desc)
fcs <- fsApply(fcs_raw, function(x, cofactor=5){
colnames(x) <- panel_fcs$desc
expr <- exprs(x)
expr <- asinh(expr[, c(lineage_markers, functional_markers)] / cofactor)
exprs(x) <- expr
x
})
fcs
expr <- fsApply(fcs, exprs)
dim(expr)
library(matrixStats)
fcs <- fsApply(fcs_raw, function(x, cofactor=5){
colnames(x) <- panel_fcs$desc
expr <- exprs(x)
expr <- asinh(expr[, c(lineage_markers, functional_markers)] / cofactor)
exprs(x) <- expr
x
})
fcs
expr <- fsApply(fcs, exprs)
dim(expr)
rng <- colQuantiles(expr, probs = c(0.01, 0.99))
expr01[expr01 > 1] <- 1
library(ggplot2)
library(reshape2)
expr01 <- t((t(expr) - rng[, 1]) / (rng[, 2] - rng[, 1]))
expr01[expr01 < 0] <- 0
expr01[expr01 > 1] <- 1
sample_ids <- rep(md$sample_id, fsApply(fcs_raw, nrow))
library(dplyr)
library(limma)
library(ggrepel)
install.packages("ggrepel")
library(RColorBrewer)
library(pheatmap)
biocLite("pheatmap")
library(pheatmap)
mm <- match(colnames(expr_median_sample), md$sample_id)
library(FlowSOM)
source("https://bioconductor.org/biocLite.R")
biocLite("FlowSOM")
source("https://bioconductor.org/biocLite.R")
biocLite("ConsensusClusterPlus")
biocLite("ConsensusClusterPlus")
library(readxl)
library(flowCore)
library(matrixStats)
library(ggplot2)
library(reshape2)
library(dplyr)
library(limma)
library(ggrepel)
library(RColorBrewer)
library(pheatmap)
library(FlowSOM)
library(ConsensusClusterPlus)
library(ggridges)
source("https://bioconductor.org/biocLite.R")
biocLite("ggridges")
library(ggridges)
library(ComplexHeatmap)
install.packages("ComplexHeatmap")
source("https://bioconductor.org/biocLite.R")
biocLite("ComplexHeatmap")
library(Rtsne)
library(cowplot)
library(lme4)
library(multcomp)
url <- "http://imlspenticton.uzh.ch/robinson_lab/cytofWorkflow"
metadata_filename <- "PBMC8_metadata.xlsx"
download.file(paste0(url, "/", metadata_filename), destfile = metadata_filename, mode = "wb")
md <- read_excel(metadata_filename)
md$condition <- factor(md$condition, levels = c("Ref", "BCRXL"))
head(data.frame(md))
url <- "http://imlspenticton.uzh.ch/robinson_lab/cytofWorkflow"
metadata_filename <- "PBMC8_metadata.xlsx"
download.file(paste0(url, "/", metadata_filename), destfile = metadata_filename, mode = "wb")
download.file(paste0(url, "/", metadata_filename), destfile = metadata_filename, mode = "wb")
md <- read_excel(metadata_filename)
md$condition <- factor(md$condition, levels = c("Ref", "BCRXL"))
head(data.frame(md))
url <- "http://imlspenticton.uzh.ch/robinson_lab/cytofWorkflow"
metadata_filename <- "PBMC8_metadata.xlsx"
download.file(paste0(url, "/", metadata_filename), destfile = metadata_filename, mode = "wb")
download.file(paste0(url, "/", metadata_filename), destfile = metadata_filename, mode = "wb")
md <- read_excel(metadata_filename)
color_conditions <- c("#6A3D9A", "#FF7F00")
color_conditions <- c("#6A3D9A", "#FF7F00")
names(color_conditions) <- levels(md$condition)
md$condition <- factor(md$condition, levels = c("Ref", "BCRXL"))
head(data.frame(md))
fcs_filename <- "PBMC8_fcs_files.zip"
download.file(paste0(url, "/", fcs_filename), destfile = fcs_filename, mode = "wb")
if(dir.exists("./Data")==FALSE){
dir.create("./Data")
}
fcs_filename <- "PBMC8_fcs_files.zip"
download.file(paste0(url, "./Data", fcs_filename), destfile = fcs_filename, mode = "wb")
download.file(paste0(url, "./Data/", fcs_filename), destfile = fcs_filename, mode = "wb")
download.file(paste0(url, "./Data/", fcs_filename), destfile = fcs_filename, mode = "wb")
file.name = "GSE12955.tsv"
file.name = "GSE12955.tsv"
df <- read.table(file.name, stringsAsFactors = FALSE)
getwd()
setwd("/Users/cansav091/Desktop/CurrentProjects/refine.bio-examples")
setwd("/Users/cansav091/Desktop/CurrentProjects/refinebio-examples")
file.name = "GSE12955.tsv"
df <- read.table(file.name, stringsAsFactors = FALSE)
df <- data.frame("Name" = rownames(df), "Description" = rep(NA, nrow(df)), df)
file.name <- gsub("tsv", "gct", file.name)
num.samples <- ncol(df) - 2
num.genes <- nrow(df)
header <- c("#1.2", paste0(c(num.genes, num.samples), collapse = "\t"))
df <- read.table(file.name, stringsAsFactors = FALSE)
grep1("\\.tsv", file.name)
grepl("\\.tsv", file.name)
file.name
createGCT <- function(file.name = file.name, output.file = file.name ){
# Read in the file
df <- read.table(file.name, stringsAsFactors = FALSE)
# Format columns to gct column names. Create a "Description" dummy variable column.
df <- data.frame("Name" = rownames(df), "Description" = rep(NA, nrow(df)), df)
if(output.file == file.name){
# Get rid of old ".tsv" suffix and replace with "gct"
output.file <- gsub("tsv", "gct", file.name)
} else {
# Check that the output.file named has a ".gct" at the end.
if(grepl("\\.gct$", output.file) == FALSE)
# If the file name doesn't end in .gct, append a ".gct" to the file name
output.file <- paste0(output.file, ".gct")
}
# Get the number of genes and samples.
num.samples <- ncol(df) - 2
num.genes <- nrow(df)
# Make .gct specific Header with the number of genes and samples in the second line.
header <- c("#1.2", paste0(c(num.genes, num.samples), collapse = "\t"))
# Write the header and then append the data to the header
write(header, file = output.file)
write.table(df, row.names = FALSE, output.file, append = TRUE, quote = FALSE, sep="\t")
# It will warn us that we are appending column names to the file, but that's what we want to do since we need that header at the top for GenePattern to recognize it.
}
createGCT(file.name =  "GSE12955.tsv")
suppressWarning(write.table(df, row.names = FALSE, output.file, append = TRUE, quote = FALSE, sep="\t"))
suppressWarnings(write.table(df, row.names = FALSE, output.file, append = TRUE, quote = FALSE, sep="\t"))
createGCT <- function(file.name = file.name, output.file = file.name ){
# Read in the file
df <- read.table(file.name, stringsAsFactors = FALSE)
# Format columns to gct column names. Create a "Description" dummy variable column.
df <- data.frame("Name" = rownames(df), "Description" = rep(NA, nrow(df)), df)
if(output.file == file.name){
# Get rid of old ".tsv" suffix and replace with "gct"
output.file <- gsub("tsv", "gct", file.name)
} else {
# Check that the output.file named has a ".gct" at the end.
if(grepl("\\.gct$", output.file) == FALSE)
# If the file name doesn't end in .gct, append a ".gct" to the file name
output.file <- paste0(output.file, ".gct")
}
# Get the number of genes and samples.
num.samples <- ncol(df) - 2
num.genes <- nrow(df)
# Make .gct specific Header with the number of genes and samples in the second line.
header <- c("#1.2", paste0(c(num.genes, num.samples), collapse = "\t"))
# Write the header and then append the data to the header
write(header, file = output.file)
suppressWarnings(write.table(df, row.names = FALSE, output.file, append = TRUE, quote = FALSE, sep="\t"))
# It will warn us that we are appending column names to the file, but that's what we want to do since we need that header at the top for GenePattern to recognize it.
}
createGCT(file.name =  "GSE12955.tsv")
createGCT(file.name =  "GSE12955.tsv", output.file = "GSE12955output")
createGCT(file.name =  "GSE12955.tsv", output.file = "GSE12955output.gct")
require(optparse)
install.package("optparse")
install.packages("optparse")
require(optparse)
